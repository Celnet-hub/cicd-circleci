version: 2.1

orbs:
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environments: <<parameters.id>>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-${id}"
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-${id}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure "https://kvdb.io/9d2Brw9Qt3fk5fzoFG35vo/migration_<<parameters.id>>")
            SUCCESS = 1
            if(( $SUCCESS==1 ));
            then
             cd ~/project/backend
             npm install
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            #Your code here. circle ci will run this command in the docker container.
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          no_output_timeout: 30m
          command: |
            # Your code here. circle ci will run this command in the docker container.
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          channel: "#automation"
          event: fail
          mentions: "@EngineeringTeam"
          template: basic_fail_1
      - slack/notify:
          channel: "#automation"
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here. circle ci will run this command in the docker container.
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            # Your code here. circle ci will run this command in the docker container.
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: "#automation"
          event: fail
          mentions: "@EngineeringTeam"
          template: basic_fail_1
      - slack/notify:
          channel: "#automation"
          event: pass
          template: success_tagged_deploy_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            # Your code here. circle ci will run this command in the docker container.
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            # Your code here. circle ci will run this command in the docker container.
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      # - save_cache:
      #     paths: [backend/node_modules]
      #     key: backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
              cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # write code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11 #ansible needs this image to run
        environment:
          NODE_ENV: "local"
          VERSION: "1"
          ENVIRONMENT: "production"
          TYPEORM_CONNECTION: $TYPEORM_CONNECTION
          TYPEORM_HOST: $TYPEORM_HOST
          TYPEORM_USERNAME: $TYPEORM_USERNAME
          TYPEORM_PASSWORD: $TYPEORM_PASSWORD
          TYPEORM_DATABASE: $TYPEORM_DATABASE
          TYPEORM_PORT: $TYPEORM_PORT
          TYPEORM_ENTITIES: $TYPEORM_ENTITIES
    steps:
      # Checkout code
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["1b:96:0a:c3:11:7c:2b:86:9d:51:f5:5d:fc:73:24:10"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk update && apk add curl curl-dev 
            apk add --upgrade bash
            apk add openssh-client
            apk add tar gzip
            apk add --update ansible 
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Configure server
          command: |
            cat ~/project/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
            
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            sudo npm install -g npm
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo "Migrations ran successfully"
              curl https://kvdb.io/9d2Brw9Qt3fk5fzoFG35vo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "Migration failed"
              curl --insecure https://kvdb.io/9d2Brw9Qt3fk5fzoFG35vo/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       your code here

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text 
            )
            API_URL=$(curl --insecure  https://kvdb.io/9d2Brw9Qt3fk5fzoFG35vo/backend_url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprint: ["1b:96:0a:c3:11:7c:2b:86:9d:51:f5:5d:fc:73:24:10"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible rsync 
            apk add curl
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            # your code here
          
            export backend_url=$(curl --insecure  https://kvdb.io/9d2Brw9Qt3fk5fzoFG35vo/backend_url)
            echo $backend_url
            echo "$backend_url/api/status"
            curl "$backend_url/api/status"
            if curl "$backend_url/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]
